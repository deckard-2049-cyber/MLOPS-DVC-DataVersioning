1. Create a git repo and clone it in local.
2. Create mycode.py and add code to it. (It will save a csv file to a new "data" folder)
3. Do a git add-commit-push before initializing dvc.
### pip install dvc
4. Now we do "dvc init" (creates .dvcignore, .dvc)
5. Now do "mkdir S3" (creates a new S3 directory) (Since we are not using AWS, so we will be creating a folder to store data here otherwise we can create S3 bucket to store the data)
6. Now we do "dvc remote add -d myremote S3"
7. Next "dvc add data/"
    Now it will ask to do : ("git rm -r --cached 'data'" and "git commit -m "stop tracking data"")
    Because initially we are tracking data/folder from git so now we remove it for DVC to handle.

8. Again we do "dvc add data/" (creates data.dvc file and makes some changes in .gitignore file) then asks us to do this "git add .gitignore data.dvc"

Note :- Whenever we track a data in dvc and maintain its version, the dvc will provide an ID corresponding to that data which you can use to    track using git. And this ID is found in data.dvc file. Also, you can see that inside a folder ".dvc" you will have two folders "10" which contains the ID details and "f0" which contains the copy of the data. So, whenever you track a data using dvc, there always be two folders, the first one containing ID and the second one containing the data.
9. Now - "dvc commit" and then "dvc push" 
(After commit and push, we can see that the data has been stored in S3 folder) (You can see that two folders are created here, folder1 contains ID and folder2 contains the data).
9. Do a git add-commit-push to mark this stage as first version of data. (this is done in git to stage the first version of data)
10. Now make changes to mycode.py to append a new row in data, check changes via "dvc status". (The terminal will display that some content has changed or modified)
11. Again - "dvc commit" and then "dvc push" 

Note :- The DVC actually tracks the data.dvc file. Because large data files are stored outside Git (e.g., in remote storage like S3, Google Drive, or an external disk). The .dvc file acts as a pointer to the actual data, keeping Git repositories lightweight.

12. Then git add-commit-push (we're saving V2 of our data at this point)
13. check dvc/git status, everything should be upto date.
14. Now repeat step 10-12 for v3 of data.

